apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: "androidx.navigation.safeargs.kotlin"

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.2'

    defaultConfig {
        applicationId "com.github.reline.jisho"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 4
        versionName "1.2.0"
        testInstrumentationRunner "com.github.reline.jisho.HiltTestRunner"

        buildConfigField("String", "DATABASE_FILE_NAME", "\"${databaseFileName}\"")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix = ".debug"
        }
    }
    buildFeatures {
        viewBinding true
    }

    flavorDimensions "environment"
    productFlavors {
        mock {
            dimension "environment"
            applicationIdSuffix ".mock"
            versionNameSuffix "-mock"
        }
        prod {
            dimension "environment"
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name == 'release' && names.contains("mock")) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }

    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

configurations {
    compile.exclude group: 'stax'
    compile.exclude group: 'xpp3'
}

kapt {
    correctErrorTypes true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':common')
    implementation 'com.github.reline:sqlitecopyopenhelper:0.1.0'
    implementation "com.squareup.sqldelight:android-driver:$sqldelight_version"
    implementation "androidx.sqlite:sqlite-ktx:$sqlite_version"
    implementation "androidx.sqlite:sqlite-framework:$sqlite_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation("androidx.fragment:fragment-ktx:$fragment_version")
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"
    implementation("androidx.navigation:navigation-fragment-ktx:$navigation_version")
    implementation("androidx.navigation:navigation-ui-ktx:$navigation_version")

    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    implementation "com.squareup.moshi:moshi:$moshi_version"
    kapt("com.squareup.moshi:moshi-kotlin-codegen:$moshi_version")

    implementation "com.squareup.okio:okio:$okio_version"

    implementation "com.jakewharton.timber:timber:$timber_version"

    implementation "com.google.dagger:hilt-android:$dagger_version"
    kapt "com.google.dagger:hilt-android-compiler:$dagger_version"

    // Hilt testing
    androidTestImplementation "com.google.dagger:hilt-android-testing:$dagger_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$dagger_version"

    testImplementation("junit:junit:4.12")
    testImplementation("androidx.test:core:1.3.0")
    testImplementation("org.robolectric:robolectric:4.4")

    debugImplementation("androidx.fragment:fragment-testing:$fragment_version")

    // Core
    androidTestImplementation("androidx.test:core:1.3.0")

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation("androidx.test:rules:1.3.0")
    androidTestImplementation("androidx.test:runner:1.3.0")

    // Assertions
    androidTestImplementation("androidx.test.ext:junit:1.1.2")
    androidTestImplementation("androidx.test.ext:truth:1.3.0")
    androidTestImplementation("com.google.truth:truth:0.42")

    // Espresso
    androidTestImplementation("androidx.test.espresso:espresso-core:$espresso_version")
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espresso_version")
    androidTestImplementation("androidx.test.espresso:espresso-intents:$espresso_version")
    androidTestImplementation("androidx.test.espresso:espresso-accessibility:$espresso_version")
    androidTestImplementation("androidx.test.espresso:espresso-web:$espresso_version")
    androidTestImplementation("androidx.test.espresso.idling:idling-concurrent:$espresso_version")
    androidTestImplementation("androidx.test.espresso:espresso-idling-resource:$espresso_version")
}

def assetsDir = "$projectDir/src/main/assets"
task createAssetsDirectory {
    mkdir assetsDir
}
