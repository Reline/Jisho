apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.2'

    defaultConfig {
        applicationId "com.github.reline.jisho"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 4
        versionName "1.2.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "DATABASE_FILE_NAME", "\"${databaseFileName}\"")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix = ".debug"
        }
    }

    flavorDimensions "environment"
    productFlavors {
        mock {
            dimension "environment"
            applicationIdSuffix ".mock"
            versionNameSuffix "-mock"
        }
        prod {
            dimension "environment"
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name == 'release' && names.contains("mock")) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }

    lintOptions {
        abortOnError false
    }

    buildFeatures {
        compose true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
    }

    composeOptions {
        kotlinCompilerVersion "${kotlin_version}"
        kotlinCompilerExtensionVersion "${compose_version}"
    }
}

androidExtensions {
    experimental = true
}

configurations {
    compile.exclude group: 'stax'
    compile.exclude group: 'xpp3'
}

kapt {
    correctErrorTypes true
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':common')
    implementation 'com.github.reline:sqlitecopyopenhelper:0.1.0'
    implementation "com.squareup.sqldelight:android-driver:$sqldelight_version"
    implementation "androidx.sqlite:sqlite-ktx:$sqlite_version"
    implementation "androidx.sqlite:sqlite-framework:$sqlite_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"

    // Compose
    implementation "androidx.compose.foundation:foundation-layout:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    implementation "androidx.compose.runtime:runtime:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"

    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"

    implementation "com.squareup.okio:okio:$okio_version"

    implementation "com.jakewharton.timber:timber:$timber_version"

    implementation "com.google.dagger:hilt-android:$dagger_version"
    kapt "com.google.dagger:hilt-android-compiler:$dagger_version"
}

def assetsDir = "$projectDir/src/main/assets"
task createAssetsDirectory {
    mkdir assetsDir
}

task verifyDatabase {
    doFirst {
        def database = new File("$assetsDir/$databaseFileName")
        if (!database.exists()) {
            throw new FileNotFoundException("Did not find $databaseFileName in assets folder")
        }
    }
}
assemble.dependsOn(verifyDatabase)
