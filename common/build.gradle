apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'org.jetbrains.kotlin.native.cocoapods'
apply plugin: 'com.squareup.sqldelight'

archivesBaseName = 'jisho-common'

sqldelight {
	JishoDatabase {
		packageName = "com.github.reline.jisho.sql"
		schemaOutputDirectory = file("src/commonMain/sqldelight/com/github/reline/jisho/sql/migrations")
	}
}

kotlin {
	// Configure common.
	sourceSets.commonMain.dependencies {
		implementation 'org.jetbrains.kotlin:kotlin-stdlib'
	}

	// Configure jvm.
	jvm()
	sourceSets.jvmTest.dependencies {
		implementation 'junit:junit:4.12'
		implementation "com.squareup.sqldelight:sqlite-driver:${versions.sqldelight}"
	}

	// Configure iOS.
	def sdkName = System.getenv("SDK_NAME")
	if (sdkName != null && sdkName.startsWith("iphoneos")) {
		iosArm64("ios")
	} else {
		iosX64("ios")
	}
	sourceSets.iosMain.dependencies {
		implementation "com.squareup.sqldelight:ios-driver:${versions.sqldelight}"
	}
	cocoapods {
		summary = "Common core for Jisho."
		homepage = "https://github.com/reline/Jisho/tree/master/common"
	}
}

task packForXcode(type: Sync) {
	group = "build"

	//selecting the right configuration for the iOS framework depending on the Xcode environment variables
	final mode = System.getenv("CONFIGURATION") ?: "DEBUG"
	final framework = kotlin.targets.getByName("ios").binaries.getFramework(mode)

	inputs.property("mode", mode)
	dependsOn(framework.linkTask)

	final targetDir = new File(buildDir, "xcode-frameworks")
	from({ framework.outputDirectory })
	into(targetDir)
}

task iosTest {
	def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
	dependsOn 'linkIos'
	group = JavaBasePlugin.VERIFICATION_GROUP
	description = "Runs tests for target 'ios' on an iOS simulator"

	doLast {
		def binary = kotlin.targets.ios.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
		exec {
			commandLine 'xcrun', 'simctl', 'spawn', '--standalone', device, binary.absolutePath
		}
	}
}

tasks.getByName("build").dependsOn(packForXcode)
