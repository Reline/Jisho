-- Copyright 2020 Nathaniel Reline
--
-- This work is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License.
-- To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/4.0/ or
-- send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.

CREATE TABLE IF NOT EXISTS Radical (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    value TEXT NOT NULL UNIQUE ON CONFLICT IGNORE,
    strokes INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS Kanji (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    value TEXT NOT NULL UNIQUE ON CONFLICT IGNORE,
    strokes INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS KanjiRadical (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    kanji_id INTEGER NOT NULL,
    radical_id INTEGER NOT NULL,
    FOREIGN KEY(kanji_id) REFERENCES Kanji(id),
    FOREIGN KEY(radical_id) REFERENCES Radical(id)
);

insertRadical:
INSERT OR IGNORE INTO Radical (value, strokes)
VALUES (?, ?);

insertKanji:
INSERT OR IGNORE INTO Kanji (value, strokes)
VALUES (?, ?);

selectRadical:
SELECT * FROM Radical WHERE value = ?;

selectAllRadicals:
SELECT * FROM Radical;

selectKanji:
SELECT * FROM Kanji WHERE value = ?;

selectAllKanji:
SELECT * FROM Kanji;

insertKanjiRadicalTag:
INSERT INTO KanjiRadical (kanji_id, radical_id)
VALUES (?, ?);

radicalsForKanji:
SELECT Radical.value
FROM Radical
INNER JOIN KanjiRadical
    ON Radical.id = KanjiRadical.radical_id
INNER JOIN Kanji
    ON Kanji.id = KanjiRadical.kanji_id
WHERE Kanji.value = ?;

kanjiForRadical:
SELECT Kanji.value
FROM Kanji
INNER JOIN KanjiRadical
    ON Kanji.id = KanjiRadical.kanji_id
INNER JOIN Radical
    ON Radical.id = KanjiRadical.radical_id
WHERE Radical.value = ?;

radicalsForKanjiId:
SELECT DISTINCT
    KanjiRadical.kanji_id AS kanjiId,
    KanjiRadical.radical_id AS radicalId,
    Radical.value AS radical,
    Radical.strokes AS radicalStrokes
FROM KanjiRadical
INNER JOIN Radical
    ON Radical.id = KanjiRadical.radical_id
WHERE KanjiRadical.kanji_id IN ?;

relatedKanji:
SELECT DISTINCT KanjiRadical.kanji_id
FROM KanjiRadical
WHERE KanjiRadical.radical_id IN :radicalIds;

relatedRadicals:
SELECT DISTINCT
    KanjiRadical.kanji_id AS kanjiId,
    KanjiRadical.radical_id AS radicalId,
    Radical.value AS radical,
    Radical.strokes AS radicalStrokes
FROM KanjiRadical
INNER JOIN Radical
    ON Radical.id = KanjiRadical.radical_id
--     AND :radicalIds
WHERE KanjiRadical.kanji_id IN (
    SELECT DISTINCT KanjiRadical.kanji_id
    FROM KanjiRadical
    WHERE KanjiRadical.radical_id IN :radicalIds
)
-- GROUP BY Radical.id
;

relatedRadicalIds:
SELECT DISTINCT
    KanjiRadical.radical_id AS radicalId
FROM KanjiRadical
WHERE KanjiRadical.kanji_id IN (
    SELECT KanjiRadical.kanji_id
    FROM KanjiRadical
    WHERE KanjiRadical.radical_id IN :radicalIds
);
